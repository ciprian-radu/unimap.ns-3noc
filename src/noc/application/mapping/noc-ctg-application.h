/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2009 Systems and Networking, University of Augsburg, Germany
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Ciprian Radu <radu@informatik.uni-augsburg.de>
 */

#ifndef NOC_CTG_APPLICATION_H
#define NOC_CTG_APPLICATION_H

#include "ns3/address.h"
#include "ns3/application.h"
#include "ns3/event-id.h"
#include "ns3/ptr.h"
#include "ns3/data-rate.h"
#include "ns3/traced-callback.h"
#include "ns3/node-container.h"
#include "ns3/net-device-container.h"
#include "ns3/noc-packet.h"

using namespace std;

namespace ns3 {

class Address;
class Socket;

/**
 *
 * \brief Network on Chip (NoC) application which injects packets into
 * the network based on a Communication Task Graph (CTG).
 * This application is to be used with a synchronous NoC: events are
 * generated by the application only, at a certain frequency which represents
 * the network's clock.
 */
class NocCtgApplication : public Application
{
public:

  /**
    * Simple data structure for keeping information about the tasks assigned
    * to this ns-3 application (and implicitly IP core and NoC node).
    */
   class TaskData {

   private:

     /** the ID of the task */
     string m_id;

     /**
      * the execution time of the task (considering that the task is
      * assigned to the IP core which was mapped to the NoC node that
      * has this ns-3 application). It is measured in seconds.
      **/
     double m_execTime;

   public:

     /**
      * Constructor
      *
      * \param   id the ID of the task
      *
      * \param   the execution time of the task (considering that the task is
      *          assigned to the IP core which was mapped to the NoC node that
      *          has this ns-3 application)
      *
      */
     TaskData (string id, double execTime);

     /**
      * \return the ID of the task
      */
     string
     GetId ();

     /**
      * \return the execution time of the task (measured in seconds)
      */
     double
     GetExecTime ();

   };

   /**
    * Simple data structure for modeling a data dependency between
    * two tasks, belonging to different NoC nodes.
    */
   class DependentTaskData {

   private:

     /** the ID of a remote task (which sends data to a task belonging to this NoC node) */
     string m_id;

     /** the amount of communicated data (communication volume), expressed in bits */
     double m_data;

     /** the ID of a task belonging to this NoC node (which receives the amount of data) */
     string m_targetTaskId;

   public:

     DependentTaskData (string id, double data, string targetTaskId);

     /**
      * \return the ID of a remote task (which sends data to a task belonging to this NoC node)
      */
     string
     GetId ();

     /**
      * \return the amount of communicated data, expressed in bits
      */
     double
     GetData ();

     /**
      * \return the ID of a local task (which receives the amount of data)
      */
     string
     GetTargetTaskId ();

   };

  static TypeId
  GetTypeId ();

  NocCtgApplication ();

  virtual ~NocCtgApplication ();

  void
  SetMaxBytes (uint32_t maxBytes);

  void
  SetNetDeviceContainer (NetDeviceContainer devices);

  void
  SetNodeContainer (NodeContainer nodes);

  /**
   * Sets the task list. This method should be called right after instantiating
   * this NocCtgApplication.
   *
   * \param taskList keeps all the tasks that are assigned to the IP core
   *        associated with this ns-3 application
   */
  void
  SetTaskList (list<TaskData> taskList);

  /**
   * Sets the task sender list. This method should be called right after instantiating
   * this NocCtgApplication.
   *
   * \param keeps all the remote tasks that send data to this NoC node
   */
  void
  SetTaskSenderList (list<DependentTaskData> taskSenderList);

protected:

  virtual void
  DoDispose ();

private:

  // inherited from Application base class.
  virtual void
  StartApplication ();    // Called at time specified by Start

  virtual void
  StopApplication ();     // Called at time specified by Stop

  //helpers
  void
  CancelEvents ();

  // Event handlers
  void
  StartSending ();

  void
  StopSending ();

  void
  SendPacket ();

  bool               m_connected;               // True if connected
  uint32_t           m_hSize;                   // The horizontal size of a 2D mesh (how many nodes can be put on a line). The vertical size of the 2D mesh is given by number of nodes
  NetDeviceContainer m_devices;                 // the net devices from the NoC network
  NodeContainer      m_nodes;                   // the nodes from the NoC network
  uint32_t           m_pktSize;                 // Size of data packets (head packets have the same size + the size of the header)
  uint16_t           m_numberOfPackets;         // How many packets a message will have
  uint16_t           m_currentPacketIndex;      // the index of the packet to be injected ( [0, m_numberOfPackets - 1] )
  Ptr<NocPacket>     m_currentHeadPacket;       // the current head packet
  Time               m_lastStartTime;           // Time last packet sent
  uint32_t           m_maxBytes;                // Limit total number of bytes sent
  uint32_t           m_totBytes;                // Total bytes sent so far
  uint32_t           m_maxPackets;              // the maximum number of packets which may be injected (zero means no limit)
  uint32_t           m_totPackets;              // Total packets injected so far
  uint32_t           m_warmupCycles;            // During warmup cycles, no statistics are collected
  EventId            m_startEvent;              // Event id for next start event
  EventId            m_sendEvent;               // Event id of pending send packet event
  bool               m_sending;                 // True if currently in sending state
  TracedCallback<Ptr<const Packet> > m_txTrace;
  
  /** keeps all the tasks that are assigned to the IP core associated with this ns-3 application */
  list<TaskData> m_taskList;

  /** keeps all the remote tasks that send data to this NoC node */
  list<DependentTaskData> m_taskSenderList;

  /**
   * Allows tracing injected messages into the network.
   * A message is identified by its head packet.
   */
  TracedCallback<Ptr<const Packet> > m_messageTrace;

  /**
   * Traces the packets, when they are received at their destination
   */
  TracedCallback<Ptr<const Packet> > m_packetReceivedTrace;

  Time
  GetGlobalClock () const;

  void
  PacketReceivedCallback (std::string path, Ptr<const Packet> packet);

  void
  ScheduleNextTx ();

  void
  ScheduleStartEvent ();

};

} // namespace ns3

#endif
